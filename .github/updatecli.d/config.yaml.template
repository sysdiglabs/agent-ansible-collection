# config.yaml
name: Molecule AMI updater
pipelineid: ${OS}-${VARIANT}-${ARCHITECTURE}

scms:
  github:
    kind: "github"
    spec:
      user: "updatecli"
      email: "updatecli@sysdig.com"
      owner: "sysdiglabs"
      repository: "agent-ansible-collection"
      token: '{{ requiredEnv "GITHUB_TOKEN" }}'
      username: draios-jenkins
      branch: "main"

actions:
  ansible-molecule:
    kind: "github/pullrequest"
    scmid: "github"
    spec:
      automerge: true
      description: "Update the ami reference for ${OS} ${VARIANT} (${ARCHITECTURE}) to the latest available"
      draft: false
      mergemethod: squash
      title: 'chore: update ${OS} ${VARIANT} (${ARCHITECTURE}) image for {{ requiredEnv "SCENARIO_NAME" }} scenario'

sources:
  getAmi:
    name: Get latest AMI for ${OS} ${VARIANT} (${ARCHITECTURE})
    kind: aws/ami
    spec:
      region: ${REGION}
      sortby: creationdateasc
      filters:
        - name: "name"
          values: ${IMAGE_NAME}
        - name: "architecture"
          values: ${ARCHITECTURE}
        - name: "owner-id"
          values: "${OWNER_ID}"

conditions:
  presentInScenario:
    name: "Check if ${OS} ${VARIANT} (${ARCHITECTURE}) is present in {{ requiredEnv "SCENARIO_NAME" }} scenario"
    scmid: "github"
    kind: yaml
    spec:
      engine: yamlpath
      file: {{ requiredEnv "SCENARIO_CONFIG" }}
      key: $.platforms[?(@.name=="${OS}-${VARIANT}-${ARCHITECTURE}")]
      keyonly: true

targets:
  updateAmi:
    name: "Update AMI for ${OS} ${VARIANT} (${ARCHITECTURE}) in {{ requiredEnv "SCENARIO_NAME" }} scenario"
    sourceid: getAmi
    scmid: "github"
    kind: yaml
    spec:
      engine: yamlpath
      file: {{ requiredEnv "SCENARIO_CONFIG" }}
      key: $.platforms[?(@.name=="${OS}-${VARIANT}-${ARCHITECTURE}")].image
